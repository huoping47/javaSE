package thisclass.demo/*--------面向对象--------
			面向过程和面向对象的区别
				-面向过程主要关注的点是，实现的过程，因果关系
					优点：对于业务逻辑比较简单的程序，可以达到快速开发，前本期投入成较低
					缺点：采用面向过程的方式开发很难解决非常复杂的业务逻辑，另外面向过程的方式导致
					软件元素之间的‘藕合度’非常高，只要其中一环出问题，整个系统受到影响，导致最终的软件
					扩展力差，另外，没有独立体的概念，所以无法达到组件复用

				-面向对象主要关注的点是，主要关注对象【独立体】能完成哪些功能
					优点:藕合度低，扩展力强，更容易解决现实世界当中更复杂的业务逻辑，组件复用性强
					缺点:前期投入成本较高，需要进行独立体的抽取，大量的系统分析与设计
			面向对象的三大特征：
				封装
				继承
				多态
				所有面向对象的编程语言都有着三大特征

				采用面向对象的方式开发一个软件，生命周期当中：【整个生命周期中贯穿使用OO面向对象方式】
					面向对象的分析：OOA
					面向对象的设计：OOD
					面向对象的编程：OOP

			类和对象的概念：
				什么是类？
					类在现实世界当中是不存在的，是一个模板，是一个概念，是人类大脑思考抽象的结果
					类代表了一类事物
					在现实世界当中，对象A与对象B之间具有共同特征，进行抽象总结出一个模板，这个模板称为类

				什么是对象？
					对象是实际存在的个体，现实世界当中实际存在

					描述一下整个软件开发的过程：
						程序员先管擦现实世界，从现实世界当中寻找对象
						寻找了N多个对象之后，发现所有的对象都有共同特征
						程序员在大脑中形成了一个模板【类】
						java程序员可以通过java代码来表述一个类
						java程序中有了类的定义
						然后通过类就可以创建对象
						有了对象之后，可以让对象直接写作起来形成一个系统

					类--【实例化】-->对象
					对象又被称为实例instance
					对象--【抽象】-->类
					重点：
						类描述的是对象的共同特征
						共同特征例如：身高特征
						这个身高特征在访问的时候，必须先创建对象，通过对象去访问这个特征
						因为这个特征具体的某个对象上之后，值不同，有的身高1.8，有的2.8。

						一个类主要描述什么信息呢?
							一个类主要描述的是 状态 + 动作
							状态信息：名字，身高，年龄，性别
							动作信息：吃，唱歌，跳舞。
							状态-->一个类的属性
							动作-->一个类的方法

							类{
								属性描述状态信息
								方法描述动作
							}
            类的定义
                语法结构
                    修饰符列表 class 类名{
                        属性；
                        方法；
                    }

			java语言中所有的.class 都表示引用数据类型

			实例化对象的语法：new 类名（）；

			什么是对象？new运算符在堆内存中开辟的内存空间称为对象
			什么是引用？引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址
			java语言当中，程序员不能直接操作堆内存，java中没有指针，不想c语言
			java语言当中，程序员只能通过‘引用’去访问堆内存中对象内部的实例变量

			访问实例变量的语法格式：
				读取数据：引用.变量名
				修改数据：引用.变量名 = 值

			局部变量在栈内存中存储
			成员变量的实例变量在堆内存的java对象内部存储

			实例变量是一个对象一份，100个对象就有100份

			实例变量不能直接采用‘类名’的方式访问
			对象级别的变量，变量存储在java对象的内部，必须现有对象
			通过对象才能访问实例变量，不能直接通过’类名‘访问

			引用可以是成员变量也可以是实例变量

			面向对象的封装性
            为什么要封装？封装有什么好处？
                封装之后对于那个事物来说，看不到这个事物复杂的一面，只能看到这个事物简单的一面
                复杂性封装，对外提供简单的操作入口
                封装之后才会形成真正的‘对象‘真正的’独立体‘
                封装就意味着以后的程序可以重复使用，并且这个事物适应性比较强，在任何场合都可以使用
                封装之后对于事物本身提高了安全性，安全系数更高
            怎么封装？
                使用private关键字私有化,private修饰的所有数据只能在本类中访问

                对外提供简单的操作入口，也就是说以后外部程序访问age属性，必须通过简单的入口进行访问
                对外提供两个公开的方法，分别是set和get方法
                修改调用set方法
                读取调用get方法
                set方法的命名规范：
                    public void set+属性名(int a){
                    }
                get方法命名规范:
                    public int get+age属性名(){
                        return age;
                    }
                setter and getter 方法没有static关键字
                有static关键字修饰的方法调用：类名.方法名（实参）
                没有static关键字修饰符的方法调用：引用.方法名(实参)



        关于java中的构造方法：
            构造方法又被称为构造函数，构造器，constructor
            构造方法语法结构：
                【修饰符列表】 构造方法名/和类名一致(形式参数列表){
                    构造方法体

                }
            对于构造方法来说，返回值类型不需要指定，并且也不能写void

            构造方法的作用？
                构造方法存在的意思是，通过构造方法的调用，可以创建对象
            构造方法的另一个作用
                创建对象的同时，初始化实例变量的内存空间[给实例变量赋值]
            构造方法怎么调用？
                new 构造方法名（实参列表）

            构造方法执行之后，有返回值吗？
                每一个构造方法实际上执行结束后都有返回值，但是这个‘return’不需要我们写，java程序自动返回值
                并且返回值类型是构造方法所在类的类型，由于返回值类型就是类本身，所有返回值类型不需要编写

                当一个类中没有定义任何构造方法的话，系统默认给该类型提供一个无参数的构造方法，这个构造方法被称为缺省构造器

                当一个类显示的将构造方法定义出来了，那么系统则不再默认为这个类提供缺省构造器，建议开发中手动的为当前类无参数构造方法，因为无参数构造方法太常用了

                构造方法支持重载机制，在一个类当中编写多个构造方法，这个构造方法显然已经构成方法重载机制

            对象和引用：
                对象：目前在使用new运算符在堆内存中开辟的内存空间称为对象
                引用：是一个变量，不一定是局部变量，还可能是成员变量，引用保存了内存地址，指向了堆内存当中的对象
                只有一个空的引用，访问对象的实例相关的数据会出现空指针异常

            参数的传递？
                主要研究和学习的是方法在调用的时候，涉及到参数传递的问题，到底是怎么传递数据的呢？



        this关键字
            this是一个关键字，this也是一个引用，也是一个变量，变量中保存的内存地址指向了自身
            this存储在jvm内存中的堆内存，每一个对象都有一个this
            没有static关键字的方法被称为‘实例方法’
            没有static关键字的变量被称为‘实例变量 ’
            this可以出现在实例方法当中，this指向当前正在执行这个动作的对象
            this不能使用在带有static关键字的方法当中

            在static里面，不能直接访问实例变量和实例方法，因为实例变量和实例方法都需要对象的存在
            而static当中是没有this关键字的

            this.用来区分局部变量和实例变量的时候不能省略

            this也可以用在实例方法当中，代表当前对象【this.】
            也可以使用在构造方法当中，通过当前的构造方法调用其他的构造方法【this（实参）；】




*/
