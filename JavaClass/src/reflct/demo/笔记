            反射机制
反射机制有什么用？
    通过java语言中的反射机制可以操作字节码文件，可以读和修改字节码文件

反射机制在java.lang.reflect包下

反射机制相关的方法有哪些？
	1. 反射机制的重点：怎么通过反射机制访问java对象的属性(Field)
		a. 给属性赋值set：
			i. 要素一：反射需要获取类名，然后通过类名去创建一个对象
			ii. 要素二：属性
			iii. 要素三：值
		b. 获取属性的值get：
			i. 要素一：获取对象的属性，用获取到的属性直接调用get方法可以获取到值
			ii. 如果该属性是privete修饰的话需要打破封装

• String	• getName()	• 返回此 字段对象表示的字段的名称。
• getType()	• 返回 类对象，该对象标识此 字段对象表示的字段的声明类型
• int	• getModifiers()	• 以整数形式返回此 字段对象表示的字段的Java语言修饰符。
• getDeclaringClass()	• 返回 类表示声明此表示的字段的类或接口对象 字段对象

	1. 什么是反射机制？反射机制有什么用？
		a. 反射机制可以操作字节码文件，可以让程序更加灵活
		b. 反射机制让代码很具有通用性，可变化的内容都是写到配置文件当中，将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，但是java代码不需要做任何改动，这就是反射机制的魅力
	2. 反射机制相关的主要的类？
		a. Java.lang.Class
		b. Java.lang.refect.Method;
		c. Java.lang.refect.Constructor;
	3. 在java中获取Class的三种方式：
		a. 第一种：class  c = Class.forName("完整类名")
		b. 第二种：Class c  =对象》getClass();
		c. 第三种：Class c = int.class; class c = String.class;
	4. 获取了Class之后，可以调用无参数构造方法来实例化对象
		a. c代表的就是日期Date类型
			i. Class c = Class.forName("java.util.Date");
		b. 实例化一个Date日期对象
			i. Object obj = c.newInstance();
			ii. 此处需要注意，newInstance()底层调用的是该类的无参数构造方法，如果没有这个无参数构造方法会出现”实例化“异常

反射机制的缺点：打破封装：如果是私有的属性，用反射机制获取到属性之
后调用‘setAccessible(true)’方法很可能给不法分子留下机会，这样设置完之后，在外部也是可以访问privete修饰的属性

	1. 通过反射机制调用一个对象的方法：
		a. 首先获取一个类，Class.forName
		b. 然后在通过获取到的类调用newIntance创建一个对象
		c. 然后获取方法Method：通过获取到的类调用getDeclareMethod方法，里面需要传实参，实参就是方法名+形式参数的数据类型.class，获取到的方法有几个形参就需要传几个
		d. 返回值，通过获取到的方法去调用invoke（）这个方法，实参需要传对象和方法的实参



注解：
	1. 注解是一种引用数据类型，编译之后也是生成xxx.class文件
	2. 注解可以出现在任何位置上
	3. 怎么自定义一个注解呢？
		a. 【修饰符列表】@interface 注解类型名{
		b. }
	4. 注解怎么使用，用在什么地方？
		a. 注解使用是的语法格式是
			i. @注解类型名
		b. 注解可以出现在类上，属性上，方法上，变量上等…
			i. 注解还可以出现在注解类型中

    元注解：用来标注‘注解类型’的注解，称为元注解

    常用的元注解有那些？
        Target  Retention

    关于Target注解：
        这是一个元注解，用来标注‘注解类型‘的‘注解’
        这个Target注解用来标注’被标注的注解‘只能出现在方法上

    关于Retention注解：
        这是一个元注解，用来标注’注解类型‘的’注解‘
        这个Retention 注解用来标注’被标注的注解‘最终保存在哪里
